{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "ics721_receive_packet_msg"
      ],
      "properties": {
        "ics721_receive_packet_msg": {
          "type": "object",
          "required": [
            "data",
            "packet"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/NonFungibleTokenPacketData"
            },
            "packet": {
              "$ref": "#/definitions/IbcPacket"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ClassId": {
      "description": "A class ID according to the ICS-721 spec. The newtype pattern is used here to provide some distinction between token and class IDs in the type system.",
      "type": "string"
    },
    "IbcEndpoint": {
      "type": "object",
      "required": [
        "channel_id",
        "port_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "port_id": {
          "type": "string"
        }
      }
    },
    "IbcPacket": {
      "type": "object",
      "required": [
        "data",
        "dest",
        "sequence",
        "src",
        "timeout"
      ],
      "properties": {
        "data": {
          "description": "The raw data sent from the other side in the packet",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "dest": {
          "description": "identifies the channel and port on the receiving chain.",
          "allOf": [
            {
              "$ref": "#/definitions/IbcEndpoint"
            }
          ]
        },
        "sequence": {
          "description": "The sequence number of the packet on the given channel",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "src": {
          "description": "identifies the channel and port on the sending chain.",
          "allOf": [
            {
              "$ref": "#/definitions/IbcEndpoint"
            }
          ]
        },
        "timeout": {
          "$ref": "#/definitions/IbcTimeout"
        }
      }
    },
    "IbcTimeout": {
      "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
      "type": "object",
      "properties": {
        "block": {
          "anyOf": [
            {
              "$ref": "#/definitions/IbcTimeoutBlock"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "IbcTimeoutBlock": {
      "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
      "type": "object",
      "required": [
        "height",
        "revision"
      ],
      "properties": {
        "height": {
          "description": "block height after which the packet times out. the height within the given revision",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "revision": {
          "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "NonFungibleTokenPacketData": {
      "type": "object",
      "required": [
        "classId",
        "receiver",
        "sender",
        "tokenIds"
      ],
      "properties": {
        "classData": {
          "description": "Optional base64 encoded field which contains on-chain metadata about the NFT class. Must be non-empty if provided.",
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "classId": {
          "description": "Uniquely identifies the collection which the tokens being transfered belong to on the sending chain. Must be non-empty.",
          "allOf": [
            {
              "$ref": "#/definitions/ClassId"
            }
          ]
        },
        "classUri": {
          "description": "Optional URL that points to metadata about the collection. Must be non-empty if provided.",
          "type": [
            "string",
            "null"
          ]
        },
        "memo": {
          "description": "Memo to add custom string to the msg",
          "type": [
            "string",
            "null"
          ]
        },
        "receiver": {
          "description": "The address that should receive the tokens on the receiving chain.",
          "type": "string"
        },
        "sender": {
          "description": "The address sending the tokens on the sending chain.",
          "type": "string"
        },
        "tokenData": {
          "description": "Optional base64 encoded metadata for the tokens being transfered. `tokenData[N]` should hold metadata for `tokenIds[N]` and both lists should have the same length if provided. Must be non-empty if provided.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Binary"
          }
        },
        "tokenIds": {
          "description": "Uniquely identifies the tokens in the NFT collection being transfered. This MUST be non-empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenId"
          }
        },
        "tokenUris": {
          "description": "Optional URL that points to metadata for each token being transfered. `tokenUris[N]` should hold the metadata for `tokenIds[N]` and both lists should have the same if provided. Must be non-empty if provided.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "TokenId": {
      "description": "A token ID according to the ICS-721 spec. The newtype pattern is used here to provide some distinction between token and class IDs in the type system.",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
